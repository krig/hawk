<% content_for :head do %>
<%= stylesheet_link_tag 'ui.attrlist.css' %>
<%= stylesheet_link_tag 'ui.oplist.css' %>
<%= stylesheet_link_tag 'ui.panel.css' %>
<%= javascript_include_tag 'jquery.ui.attrlist.js' %>
<%= javascript_include_tag 'jquery.ui.oplist.js' %>
<%= javascript_include_tag 'jquery.ui.panel.js' %>
<% end %>
<script type="text/javascript">

// Shotgun approach
var anything_changed = false;

var r_info = <%= Primitive.classes_and_providers.to_json.html_safe %>;

var req = null;

var r_meta = <%= Primitive.metadata(@res.r_class, @res.r_provider, @res.r_type).to_json.html_safe %>;

<%
if Util.has_feature?(:rsc_template) && !is_template?
  template_info = Hash[::Template.all.map{|t| [t.id, {
    :c => t.r_class, :p => t.r_provider, :t => t.r_type }] }]
  # TODO(should): probably want natcmp
  all_templates = template_info.keys.sort
%>

// We're going to need C:P:T indexed by template ID here in
// order to fill everything else out on the fly.  We also need
// to know C:P:T of current templates upfront for initial display.
var r_templates = <%= template_info.to_json.html_safe %>;
<%
end
%>

var keypress_hack = {
  r_class: "<%= escape_javascript(@res.r_class) %>",
  r_provider: "<%= escape_javascript(@res.r_provider) %>",
  r_type: "<%= escape_javascript(@res.r_type) %>"
<% if Util.has_feature?(:rsc_template) && !is_template? %>
  , r_template: "<%= escape_javascript(@res.r_template) %>"
<% end %>
};

function update_provider() {
  keypress_hack.r_class = $("#<%= id_prefix %>_r_class").val()
  keypress_hack.r_provider = "";
  keypress_hack.r_type = "";
  $("#help").hide();
  $("#info").hide();
  $("#parameters").panel("body_element").attrlist({ all_attrs: {}});
  $("#<%= id_prefix %>_r_provider option").remove();
  if (r_info.r_providers[$("#<%= id_prefix %>_r_class").val()]) {
    $.each(r_info.r_providers[$("#<%= id_prefix %>_r_class").val()], function() {
      $("#<%= id_prefix %>_r_provider").append('<option value="' + escape_field(this.toString()) + '">' + escape_html(this.toString()) + "</option>");
    });
    $("#<%= id_prefix %>_r_provider").removeAttr("disabled");
  } else {
    $("#<%= id_prefix %>_r_provider").attr("disabled", "disabled");
  }
  update_type();
}

function update_type() {
  var c = $("#<%= id_prefix %>_r_class").val();
  var p = $("#<%= id_prefix %>_r_provider").val() || "";
  keypress_hack.r_provider = p;
  keypress_hack.r_type = "";
  $("#help").hide();
  $("#info").hide();
  $("#parameters").panel("body_element").attrlist({ all_attrs: {}});
  $("#<%= id_prefix %>_r_type option").remove();
  // Always have the first type blank (forces user to select something before populating parameters)
  $("#<%= id_prefix %>_r_type").append('<option value=""></option>');
  $("#type-spinner").show();
  $("#<%= id_prefix %>_r_type").attr("disabled", "disabled");
  disable_apply();
  if (req && req.abort) req.abort();
  req = $.getJSON('<%= primitives_types_path %>', "r_class=" + escape(c) + "&r_provider=" + escape(p), function(data) {
    $.each(data, function() {
      $("#<%= id_prefix %>_r_type").append('<option value="' + escape_field(this.toString()) + '">' + escape_html(this.toString()) + "</option>");
    });
    $("#<%= id_prefix %>_r_type").removeAttr("disabled");
    $("#type-spinner").hide();
    enable_apply();
  });
}

// TODO(must): this override possibly mauls keypress hack -- verify
function update_params(oc, op, ot) {
  var t = ot || $("#<%= id_prefix %>_r_type").val();
  keypress_hack.r_type = t;
  $("#help").hide();
  $("#info").hide();
  $("#parameters").panel("body_element").attrlist({ all_attrs: {}});
  if (t) {
    var c = oc || $("#<%= id_prefix %>_r_class").val();
    var p = op || $("#<%= id_prefix %>_r_provider").val() || "";
    $("#type-spinner").show();
    disable_apply();
    if (req && req.abort) req.abort();
    req = $.getJSON('<%= primitives_metadata_path %>', "r_class=" + escape(c) + "&r_provider=" + escape(p) + "&r_type=" + escape(t), function(data) {
      // First two probably not necessary
      r_meta = data;

      $("#parameters").panel("body_element").attrlist({ all_attrs: r_meta.parameters });
      if (!$("#parameters").panel("body_element").attrlist("empty")) {
        $("#parameters").panel("expand");
      }
      var default_ops = {};
      $.each(r_meta.ops, function(n, ops) {
        switch (n) {
          case "start":
          case "stop":
          case "monitor":
            if (!default_ops[n]) default_ops[n] = [];
            $.each(ops, function(i, op) {
              default_ops[n].push(op);
            });
            break;
        }
      });
      $("#operations").panel("body_element").oplist({ all_ops: r_meta.ops, set_ops: default_ops });
      $("#operations").panel("expand");

      $("#type-spinner").hide();

      show_info();

      enable_apply();
    });
  } else {
    enable_apply();
  }
}

function show_info() {
  if (r_meta.shortdesc || r_meta.longdesc) {
    $("#info-shortdesc").html(escape_html(r_meta.shortdesc));
    $("#info-longdesc").html(r_meta.longdesc != r_meta.shortdesc ? escape_html(r_meta.longdesc) : "");
    $("#info").show();
  } else {
    $("#info").hide();
  }
}

// conditionally enable form submit
function enable_apply() {
  anything_changed = true;
  var enable = $("#<%= id_prefix %>_id").val() != "" && $("#<%= id_prefix %>_r_type").val() != "";
<% if Util.has_feature?(:rsc_template) && !is_template? %>
  if ($("#<%= id_prefix %>_use_template")[0].checked) {
    enable = $("#<%= id_prefix %>_id").val() != "" && $("#<%= id_prefix %>_r_template").val() != "";
  }
<% end %>
  $.each(r_meta.parameters, function(n, v) {
    if (v.required && $("#<%= id_prefix %>_params_" + n).val() == "") {
      enable = false;
      return false;
    }
  });
  if (enable) {
    $("#<%= id_prefix %>_submit").removeAttr("disabled");
    $("#<%= id_prefix %>_revert").removeAttr("disabled");
  } else {
    disable_apply();
  }
}

// unconditionally disable form submit
function disable_apply() {
  $("#<%= id_prefix %>_submit").attr("disabled", "disabled");
  $("#<%= id_prefix %>_revert").attr("disabled", "disabled");
}

$(function() {
  $("#<%= id_prefix %>_r_class")
    .bind("keyup change", function() {
      if ($(this).val() != keypress_hack.r_class) {
        update_provider();
      }
    }).keydown(function() {
      keypress_hack.r_class = $(this).val();
    });

  $("#<%= id_prefix %>_r_provider")
    .bind("keyup change", function() {
      if ($(this).val() != keypress_hack.r_provider) {
        update_type();
      }
    }).keydown(function() {
      keypress_hack.r_provider = $(this).val();
    });

  $("#<%= id_prefix %>_r_type")
    .bind("keyup change", function() {
      if ($(this).val() != keypress_hack.r_type) {
        update_params();
      }
    }).keydown(function() {
      keypress_hack.r_type = $(this).val();
    });

<% if Util.has_feature?(:rsc_template) && !is_template? %>
  $("#<%= id_prefix %>_r_template")
    .bind("keyup change", function() {
      if ($(this).val() != keypress_hack.r_template) {
        var t = $(this).val();
        $("#label_r_class").text(r_templates[t].c);
        $("#label_r_provider").text(r_templates[t].p);
        $("#label_r_type").text(r_templates[t].t);
        update_params(r_templates[t].c, r_templates[t].p, r_templates[t].t);
      }
    }).keydown(function() {
      keypress_hack.r_template = $(this).val();
    });

  $("#<%= id_prefix %>_use_template").change(function() {
    if (this.checked) {
      $("#<%= id_prefix %>_r_class,#<%= id_prefix %>_r_provider,#<%= id_prefix %>_r_type").hide();
      $("#label_r_class").show();
      $("#label_r_provider").show();
      $("#label_r_type").show();
      $("#<%= id_prefix %>_r_template").removeAttr("disabled");
    } else {
      $("#label_r_class,#label_r_provider,#label_r_type").hide();
      $("#<%= id_prefix %>_r_class,#<%= id_prefix %>_r_provider,#<%= id_prefix %>_r_type").show();
      $("#<%= id_prefix %>_r_template").val("");
      $("#<%= id_prefix %>_r_template").attr("disabled", "disabled");
    }
  });
<% end %>
  $("#parameters").panel({ label: "<%=h escape_javascript _('Parameters') %>", menu_icon: url_root + "/assets/transparent-16x16.gif" });
  $("#parameters").panel("body_element").attrlist({
    all_attrs: r_meta.parameters,
    set_attrs: <%= @res.params.to_json.html_safe %>,
    prefix: "<%= id_prefix %>[params]",
    labels: {
      add: "<%= escape_javascript _('Add') %>",
      remove: "<%= escape_javascript _('Remove') %>",
      no_value: "<%= escape_javascript _('You must enter a value') %>"
    },
    dirty: function(event, info) {
      // This might be a bit event-heavy
      enable_apply();
    },
    all_optional: <%= is_template? ? "true" : "false" %>
  });
  if (!$("#parameters").panel("body_element").attrlist("empty")) {
    $("#parameters").panel("expand");
  }

  $("#operations").panel({ label: "<%=h escape_javascript _('Operations') %>", menu_icon: url_root + "/assets/transparent-16x16.gif" });
  $("#operations").panel("body_element").oplist({
    all_ops: r_meta.ops,
    set_ops: <%= @res.ops.to_json.html_safe %>,
    prefix: "<%= id_prefix %>[ops]",
    labels: {
      add: "<%= escape_javascript _('Add') %>",
      edit: "<%= escape_javascript _('Edit') %>",
      remove: "<%= escape_javascript _('Remove') %>",
      no_value: "<%= escape_javascript _('You must enter a value') %>",
      duplicate_interval: "<%= escape_javascript _('There is already a monitor op with this interval.') %>",
      ok: "<%= escape_javascript _('OK') %>",
      cancel: "<%= escape_javascript _('Cancel') %>"
    },
    dirty: function(event, info) {
      // This might be a bit event-heavy
      enable_apply();
    }
  });
  if (!$("#operations").panel("body_element").oplist("empty")) {
    $("#operations").panel("expand");
  }

  $("#meta").panel({ label: "<%=h escape_javascript _('Meta Attributes') %>", menu_icon: url_root + "/assets/transparent-16x16.gif" });
  $("#meta").panel("body_element").attrlist({
    all_attrs: r_meta.meta,
    set_attrs: <%= @res.meta.to_json.html_safe %>,
    prefix: "<%= id_prefix %>[meta]",
    labels: {
      add: "<%= escape_javascript _('Add') %>",
      remove: "<%= escape_javascript _('Remove') %>",
      no_value: "<%= escape_javascript _('You must enter a value') %>"
    },
    dirty: function(event, info) {
      // This might be a bit event-heavy
      enable_apply();
    },
    all_optional: <%= is_template? ? "true" : "false" %>
  });
  if (!$("#meta").panel("body_element").attrlist("empty")) {
    $("#meta").panel("expand");
  }

  $("#<%= id_prefix %>_id")
    .bind("keyup change", function() {
      enable_apply();
    }).focus();

  // Prevent page reload from causing e.g.: provider to remain ocfs2,
  // but type list is back on heartbeat types.
  $("#<%= id_prefix %>_r_class").val(keypress_hack.r_class);
  $("#<%= id_prefix %>_r_provider").val(keypress_hack.r_provider);
  $("#<%= id_prefix %>_r_type").val(keypress_hack.r_type);

  show_info();

<%= render :partial => 'shared/confirm_revert', :locals => { :button_ids => "##{id_prefix}_revert,##{id_prefix}_cancel" } %>
});
</script>
<%= form_for([ @cib, @res ]) do |f| %>
<table>
  <tr>
    <th><%=h f.label :id, is_template? ? _('Template ID') : _('Resource ID') %></th>
    <th><%=h f.label :r_class, _('Class') %></th>
    <th><%=h f.label :r_provider, _('Provider') %></th>
    <th><%=h f.label :r_type, _('Type') %></th>
    <td></td>
    <td rowspan="7" style="padding: 1em; vertical-align: top;">
      <!-- info block for this RA -->
      <div id="info" class="ui-state-highlight ui-corner-all" style="padding: 0.5em; display: none; margin-bottom: 1em;">
        <div id="info-shortdesc" style="padding-bottom: 0.5em;"></div>
        <div id="info-longdesc"></div>
      </div>
      <!-- generic help block for use by ui.attrlist -->
      <div id="help" class="ui-state-highlight ui-corner-all" style="padding: 0.5em; display: none;">
        <div id="help-name" style="padding-bottom: 0.5em;"></div>
        <div id="help-shortdesc" style="padding-bottom: 0.5em;"></div>
        <div id="help-longdesc"></div>
      </div>
    </td>
  </tr>
  <tr>
    <td><%= f.text_field :id %></td>
    <td><%= f.select :r_class, options_for_select(Primitive.classes_and_providers[:r_classes], @res.r_class) %><span id="label_r_class" style="display: none;"></span></td>
    <td><%=
      if Primitive.classes_and_providers[:r_providers].has_key?(@res.r_class)
        f.select :r_provider, options_for_select(Primitive.classes_and_providers[:r_providers][@res.r_class], @res.r_provider)
      else
        f.select :r_provider, options_for_select([]), {}, { :disabled => true }
      end %><span id="label_r_provider" style="display: none;"></span></td>
    <td><%= f.select :r_type, options_for_select([''] + Primitive.types(@res.r_class, default_provider), @res.r_type),
      {}, { :class => 'type' } %><span id="label_r_type" style="display: none;"></span></td>
    <td><span id="type-spinner" style="display: none;"><%= image_tag 'spinner-16x16.gif', :alt => '' %></span></td>
  </tr>
<% if Util.has_feature?(:rsc_template) && !is_template? %>
  <tr>
    <td></td>
    <td colspan="2" style="white-space: nowrap;">
      <%= check_box_tag "#{id_prefix}_use_template", "true", !@res.r_template.empty?,
        { :disabled => !@res.r_template.empty? } %>
      <%=h label_tag "#{id_prefix}_use_template", _("Use Template") %>
    </td>
    <td>
      <%= f.select :r_template, options_for_select([''] + all_templates, @res.r_template), {},
        { :disabled => all_templates.empty? || !@res.r_template.empty?, :class => 'type' } %>
    </td>
  </tr>
<% end %>
  <tr>
    <td colspan="4">
      <div id="parameters"></div>
    </td>
  </tr>
  <tr>
    <td colspan="4">
      <div id="operations"></div>
    </td>
  </tr>
  <tr>
    <td colspan="4">
      <div id="meta"></div>
    </td>
  </tr>
</table>
<% end %>
